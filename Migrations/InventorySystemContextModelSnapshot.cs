// <auto-generated />
using System;
using InventorySystem.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InventorySystem.Migrations
{
    [DbContext(typeof(InventorySystemContext))]
    partial class InventorySystemContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("InventorySystem.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Name = "Michelle"
                        },
                        new
                        {
                            CategoryId = 2,
                            Name = "Stephen E."
                        },
                        new
                        {
                            CategoryId = 3,
                            Name = "Margaret"
                        },
                        new
                        {
                            CategoryId = 4,
                            Name = "Jane"
                        },
                        new
                        {
                            CategoryId = 5,
                            Name = "James"
                        },
                        new
                        {
                            CategoryId = 6,
                            Name = "Emily"
                        },
                        new
                        {
                            CategoryId = 7,
                            Name = "Agatha"
                        },
                        new
                        {
                            CategoryId = 8,
                            Name = "Ta-Nehisi"
                        },
                        new
                        {
                            CategoryId = 9,
                            Name = "Jared"
                        },
                        new
                        {
                            CategoryId = 10,
                            Name = "Joan"
                        },
                        new
                        {
                            CategoryId = 11,
                            Name = "Daphne"
                        },
                        new
                        {
                            CategoryId = 12,
                            Name = "Tina"
                        },
                        new
                        {
                            CategoryId = 13,
                            Name = "Roxane"
                        },
                        new
                        {
                            CategoryId = 14,
                            Name = "Dashiel"
                        },
                        new
                        {
                            CategoryId = 15,
                            Name = "Frank"
                        },
                        new
                        {
                            CategoryId = 16,
                            Name = "Aldous"
                        },
                        new
                        {
                            CategoryId = 17,
                            Name = "Stieg"
                        },
                        new
                        {
                            CategoryId = 18,
                            Name = "David"
                        },
                        new
                        {
                            CategoryId = 19,
                            Name = "Toni"
                        },
                        new
                        {
                            CategoryId = 20,
                            Name = "George"
                        },
                        new
                        {
                            CategoryId = 21,
                            Name = "Mary"
                        },
                        new
                        {
                            CategoryId = 22,
                            Name = "Sun"
                        },
                        new
                        {
                            CategoryId = 23,
                            Name = "Augusten"
                        },
                        new
                        {
                            CategoryId = 25,
                            Name = "JK"
                        },
                        new
                        {
                            CategoryId = 26,
                            Name = "Seth"
                        });
                });

            modelBuilder.Entity("InventorySystem.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int?>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Vendor")
                        .HasColumnType("TEXT");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Name = "1776",
                            Price = 18.0,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 2,
                            Name = "1984",
                            Price = 5.5,
                            WarehouseId = "newyork"
                        },
                        new
                        {
                            ProductId = 3,
                            Name = "And Then There Were None",
                            Price = 4.5,
                            WarehouseId = "losangles"
                        },
                        new
                        {
                            ProductId = 4,
                            Name = "Band of Brothers",
                            Price = 11.5,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 5,
                            Name = "Beloved",
                            Price = 10.99,
                            WarehouseId = "washingtondc"
                        },
                        new
                        {
                            ProductId = 6,
                            Name = "Between the World and Me",
                            Price = 13.5,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 7,
                            Name = "Bossypants",
                            Price = 4.25,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 8,
                            Name = "Brave New World",
                            Price = 16.25,
                            WarehouseId = "newyork"
                        },
                        new
                        {
                            ProductId = 9,
                            Name = "D-Day",
                            Price = 15.0,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 10,
                            Name = "Down and Out in Paris and London",
                            Price = 12.5,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 11,
                            Name = "Dune",
                            Price = 8.75,
                            WarehouseId = "newyork"
                        },
                        new
                        {
                            ProductId = 12,
                            Name = "Emma",
                            Price = 9.0,
                            WarehouseId = "washingtondc"
                        },
                        new
                        {
                            ProductId = 13,
                            Name = "Frankenstein",
                            Price = 6.5,
                            WarehouseId = "newyork"
                        },
                        new
                        {
                            ProductId = 14,
                            Name = "Go Tell it on the Mountain",
                            Price = 10.25,
                            WarehouseId = "washingtondc"
                        },
                        new
                        {
                            ProductId = 15,
                            Name = "Guns, Germs, and Steel",
                            Price = 15.5,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 16,
                            Name = "Hunger",
                            Price = 14.5,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 17,
                            Name = "Murder on the Orient Express",
                            Price = 6.75,
                            WarehouseId = "losangles"
                        },
                        new
                        {
                            ProductId = 18,
                            Name = "Pride and Prejudice",
                            Price = 8.5,
                            WarehouseId = "washingtondc"
                        },
                        new
                        {
                            ProductId = 19,
                            Name = "Rebecca",
                            Price = 10.99,
                            WarehouseId = "losangles"
                        },
                        new
                        {
                            ProductId = 20,
                            Name = "The Art of War",
                            Price = 5.75,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 21,
                            Name = "The Girl with the Dragon Tattoo",
                            Price = 8.5,
                            WarehouseId = "losangles"
                        },
                        new
                        {
                            ProductId = 22,
                            Name = "The Handmaid's Tale",
                            Price = 12.5,
                            WarehouseId = "newyork"
                        },
                        new
                        {
                            ProductId = 23,
                            Name = "The Maltese Falcon",
                            Price = 10.99,
                            WarehouseId = "losangles"
                        },
                        new
                        {
                            ProductId = 24,
                            Name = "The New Jim Crow",
                            Price = 13.75,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 25,
                            Name = "The Year of Magical Thinking",
                            Price = 13.5,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 26,
                            Name = "Wuthering Heights",
                            Price = 9.0,
                            WarehouseId = "washingtondc"
                        },
                        new
                        {
                            ProductId = 27,
                            Name = "Running With Scissors",
                            Price = 11.0,
                            WarehouseId = "chicago"
                        },
                        new
                        {
                            ProductId = 28,
                            Name = "Pride and Prejudice and Zombies",
                            Price = 8.75,
                            WarehouseId = "washingtondc"
                        },
                        new
                        {
                            ProductId = 29,
                            Name = "Harry Potter and the Sorcerer's Stone",
                            Price = 9.75,
                            WarehouseId = "washingtondc"
                        });
                });

            modelBuilder.Entity("InventorySystem.Models.ProductCategory", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 18
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 20
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 19
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 8
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 12
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 16
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 2
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 20
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 15
                        },
                        new
                        {
                            ProductId = 12,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 13,
                            CategoryId = 21
                        },
                        new
                        {
                            ProductId = 14,
                            CategoryId = 5
                        },
                        new
                        {
                            ProductId = 15,
                            CategoryId = 9
                        },
                        new
                        {
                            ProductId = 16,
                            CategoryId = 13
                        },
                        new
                        {
                            ProductId = 17,
                            CategoryId = 7
                        },
                        new
                        {
                            ProductId = 18,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 19,
                            CategoryId = 11
                        },
                        new
                        {
                            ProductId = 20,
                            CategoryId = 22
                        },
                        new
                        {
                            ProductId = 21,
                            CategoryId = 17
                        },
                        new
                        {
                            ProductId = 22,
                            CategoryId = 3
                        },
                        new
                        {
                            ProductId = 23,
                            CategoryId = 14
                        },
                        new
                        {
                            ProductId = 24,
                            CategoryId = 1
                        },
                        new
                        {
                            ProductId = 25,
                            CategoryId = 10
                        },
                        new
                        {
                            ProductId = 26,
                            CategoryId = 6
                        },
                        new
                        {
                            ProductId = 27,
                            CategoryId = 23
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 4
                        },
                        new
                        {
                            ProductId = 28,
                            CategoryId = 26
                        },
                        new
                        {
                            ProductId = 29,
                            CategoryId = 25
                        });
                });

            modelBuilder.Entity("InventorySystem.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Firstname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Lastname")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("InventorySystem.Models.Warehouse", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("Code")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ContactPerson")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasMaxLength(25)
                        .HasColumnType("TEXT");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            WarehouseId = "chicago",
                            Code = 1234,
                            Name = "Chicago"
                        },
                        new
                        {
                            WarehouseId = "newyork",
                            Code = 4321,
                            Name = "New York"
                        },
                        new
                        {
                            WarehouseId = "losangles",
                            Code = 5678,
                            Name = "Los Angles"
                        },
                        new
                        {
                            WarehouseId = "washingtondc",
                            Code = 8765,
                            Name = "Washington DC"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("InventorySystem.Models.Product", b =>
                {
                    b.HasOne("InventorySystem.Models.Warehouse", "Warehouse")
                        .WithMany("Products")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("InventorySystem.Models.ProductCategory", b =>
                {
                    b.HasOne("InventorySystem.Models.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InventorySystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InventorySystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("InventorySystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InventorySystem.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("InventorySystem.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("InventorySystem.Models.Product", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("InventorySystem.Models.Warehouse", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
